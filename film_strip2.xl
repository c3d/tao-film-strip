import Mapping

film_strip YShift:real, Body ->
// ----------------------------------------------------------------------------
//    Play something on a film strip
// ----------------------------------------------------------------------------
    frame_texture 1280, 768,
        color "black"
        rectangle 1280, 768

        locally
            true
            Body

        color "white"
        for Y in -4..4 loop
            rounded_rectangle  600, Y * 96, 40, 30, 5
            rounded_rectangle -600, Y * 96, 40, 30, 5

    film_strip_shader

    texture_wrap true, true
    texture_transform
        translate 0, YShift, 0
        scale 1, 101, 1

    plane 0, 0, 1280, 76800, 40, 1200


OldMovieAmount -> 0.0
old_movie_shader_amount Amount:real ->
// ----------------------------------------------------------------------------
//   Define the level of the old_movie_shader effect
// ----------------------------------------------------------------------------
    OldMovieAmount := Amount
    shader_set time := page_time mod 1000
    shader_set flicker := 0.1 * OldMovieAmount
    shader_set lightvariance := 0.05 * OldMovieAmount
    shader_set blackandwhite := 1.0 * OldMovieAmount
    shader_set oversaturation := 0.3 * OldMovieAmount
    shader_set vignette := 1.0 * OldMovieAmount
    shader_set scratches := 0.5 * OldMovieAmount^4
    shader_set scratchsize := 8, 200
    shader_set splotches := 200 * OldMovieAmount^8


old_movie_shader ->
// ----------------------------------------------------------------------------
//   GLSL shader that simulates old-movie like defects
// ----------------------------------------------------------------------------
    shader_program
        vertex_shader <<
            varying vec4 color;
            void main()
            {
                gl_Position = ftransform();
                gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;
                color = gl_Color;
            }
        >>
        fragment_shader <<
            uniform float time;
            uniform sampler2D texture;
            uniform float flicker;
            uniform float oversaturation;
            uniform float lightvariance;
            uniform float blackandwhite;
            uniform float scratches;
            uniform vec2 scratchsize;
            uniform float vignette;
            uniform float splotches;
            varying vec4 color;

            void main()
            {
                float noise = lightvariance * sin(30.3 * time) * sin(0.3 * time) + flicker * sin(82831.3 * time);

                vec2 fc = gl_FragCoord.xy;

                vec2 tc = gl_TexCoord[0].xy;
                vec4 col = texture2D(texture, tc);
                float bw = dot(col.xyz, col.xyz);
                col = mix(col, vec4(bw, bw, bw, col.a), blackandwhite);
                col = col * (1.0 + oversaturation + noise);

                vec2 vc = tc - vec2(0.5);
                float vign = vignette * dot(vc, vc);
                col = mix(col, vec4(0.3), vign);

                vec2 scratchOffset = (fc - time * vec2(11.3, 21.14)) / scratchsize;
                vec2 scratchIndex = ceil(scratchOffset);
                vec2 scratchError = fract(scratchOffset) - vec2(0.5);
                vec2 scratch = scratchsize * scratchIndex;
                float sn = sin(dot(scratch, vec2(time, 0.01)));
                float se = 1.0 - 5.0 * scratchError.x*scratchError.x;
                sn = se * smoothstep(1.0 - 1e-5 * scratches, 1.000001, sn);
                col = mix(col, vec4(1), sn);

                const float splotchSpeed = 26.112831;
                float splotchTime = floor(time * splotchSpeed);
                vec2 splotch = 2000.0 * sin(vec2(0.5, 0.8) * splotchTime);
                float splotchDist = length(fc - splotch);
                float splotchSize = splotches * abs(sin(splotchTime));
                float splotchInt = 1.0 - smoothstep(0.6*splotchSize, splotchSize, splotchDist);
                col = mix(col, vec4(0.9, 0.5 + 0.4*splotchInt, splotchInt, 1), 0.8*splotchInt);


                gl_FragColor = color * col;
            }
        >>


film_strip_shader ->
// ----------------------------------------------------------------------------
//   GLSL shader
// ----------------------------------------------------------------------------
    shader_program
        vertex_shader <<
            varying vec3 position;

            const float degrees = 3.14159253589793238462643383 / 180.0;

            void main()
            {
                vec4 vc = gl_Vertex;
                float y = vc.y;
                float s = 1.0 / (1.0 + 600.1 * y * y);

                // vc.y = 0.003*sin(300.0 * y) * s + 0.1 * y;
                // vc.z = 50.0*cos(300.0 * y) * s - 20000.0*y*y;
                vc.z -= 50000.0 * y * y + 2000000.0 * y * y * s;
                vc.y *= s;
                vc.y += (0.003 * sin(211.0 * y) + 0.01 * sin(27.2 * y)) * (1.0-s);
                vc.x += 200.0 * y * y * y;
                gl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix * vc;
                position = vc.xyz;

                gl_FrontColor = gl_Color;
                gl_BackColor = gl_Color;
                gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;
            }
        >>
        fragment_shader <<
            uniform sampler2D texture;
            varying vec3 position;

            const vec3 lightVector = vec3(0.57735);

            void main()
            {

                vec3 dx = dFdx(position);
                vec3 dy = dFdy(position);
                vec3 n = cross(dx, dy);
                vec3 normal = normalize(gl_NormalMatrix * n);

                vec2 texCoord = gl_TexCoord[0].xy;
                vec4 texColor = texture2D(texture, texCoord);
                float d = dot(lightVector, normal);
                float amp = 0.5 + 0.5 * d;
                float sat = 0.3 * smoothstep(0.95, 1.05, d);
                gl_FragColor = gl_Color * texColor * vec4(amp, amp, amp, 1) + vec4(sat, sat, sat, 1);
            }
        >>
